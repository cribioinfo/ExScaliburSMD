#!/usr/bin/env bds
/**
 * Copyright (C) 2013-2015 Center for Research Informatics, The University of Chicago
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, version
 * 3 of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 */

include "utils.bds"
include "picard.bds"

/** NovoalignAndPostprocess
 * runs Novoalign alignment, merging, deduping and collects various metrics.
 * 
 * @input incfg the sample config map 
 * @input reference the reference fasta
 * @input opt the option map
 * @return nothing 
 */ 
void NovoalignAndPostprocess( string{} incfg, string reference, string{} opt ) {
  # General information
  string sample        = incfg{"sample"}
  string[] tlist       = ["NORMAL", "TUMOR"]
  string[] pids

  for (string stype : tlist ) {
    pid := par ParallelNovoalign( sample, incfg, stype, opt )
    pids.add(pid)
  }

  # -- SAFE GUARD
  wait pids
}

/**
 * Wrapper for running Novoalign in parallel
 * @input sample the sample ID
 * @input incfg the sample config map
 * @input stype the sample phenotype
 * @input opt the option map 
 */
void ParallelNovoalign( string sample, string{} incfg, string stype, string{} opt ) {
  # Files
  string referenceName = opt{"reference_name"}
  string novoIndex     = opt{"novoalign_index"}
  string projectDir    = incfg{"projectDir"}.path()
  string resultsDir    = incfg{"resultsDir"}.path()
  string logsDir       = incfg{"logsDir"}.path()
  string alnDir        = projectDir.path() + "/results/$sample/01_Alignments/novoalign"
  string alnLogsDir    = projectDir.path() + "/logs/01_Alignments/novoalign"

  if( !alnLogsDir.exists() ) alnLogsDir.mkdir()
  if( !alnDir.exists() ) alnDir.mkdir()

  #-- NORMAL 
  if( stype == "NORMAL" ) {
    # FILES
    string[] normalCfgs        = incfg{"normalConfigs"}.split(",")
    string normalID            = "$sample-NORMAL"
    string normalMergeLogs     = alnLogsDir + "/$normalID.novoalign.merge.logs"
    string normalMergeBam      = alnDir + "/$normalID.novoalign.bam"
    string normalDedupBam      = alnDir + "/$normalID.novoalign.dedup.bam"
    string normalDedupLogs     = alnLogsDir + "/$normalID.novoalign.dedup.logs"
    string normalMetricsLogs   = alnLogsDir + "/$normalID.novoalign.metrics.logs"
    string normalMetricsPrefix = alnDir + "/$normalID.novoalign.metrics"
    string normalCoverageFile  = alnDir + "/$normalID.novoalign.$referenceName.exons.bed"
    string[] normalGrpFqs = getFastqs( normalCfgs )
    string[] normalFqs
    for( string f : normalGrpFqs ) {
      normalFqs.add( f.split(",") )
    }

    # Check complex dependency
    if( normalDedupBam <- normalFqs ) {
      # Will mark these for removal
      string[] tmpFiles

      # Map fastqs
      string{} results   = sampleNovoalignMap( normalCfgs, reference, novoIndex, opt, alnDir, alnLogsDir )
      string[] currBams  = results{"bams"}.split(",")
      string[] currOther = results{"others"}.split(",")
      string[] currTids  = results{"tids"}.split(",")
      tmpFiles.add(currOther)

      #-- SAFE GUARD
      wait currTids

      # Merge
      string mergeTask = mergeBams( currBams, normalMergeBam, normalMergeLogs, normalID, "novoalign", opt )
      #tmpFiles.add( [normalMergeBam, normalMergeBam.swapExt("bam", "bai") ] )

      # Dedup
      string ntid = dedupBam( normalMergeBam, normalDedupBam, normalDedupLogs, normalID, "novoalign", opt )
 
      # Mark tmp files for removal
      #tmpFiles.rmOnExit()

      # Metrics
      collectMetrics( normalDedupBam, normalMetricsPrefix, normalCoverageFile, normalMetricsLogs, \
                      normalID, "novoalign", opt )
    } else info("Sample=$sample | Phenotype=NORMAL | Task=Alignments | Aln=novoalign | Run=false")
  }

  #-- TUMOR 
  else {
    string[] tumorCfgs   = incfg{"tumorConfigs"}.split(",")
    string tumorID       = "$sample-TUMOR"
    string tumorMergeLogs     = alnLogsDir + "/$tumorID.novoalign.merge.logs"
    string tumorMergeBam      = alnDir + "/$tumorID.novoalign.bam"
    string tumorDedupBam      = alnDir + "/$tumorID.novoalign.dedup.bam"
    string tumorDedupLogs     = alnLogsDir + "/$tumorID.novoalign.dedup.logs"
    string tumorMetricsLogs   = alnLogsDir + "/$tumorID.novoalign.metrics.logs"
    string tumorMetricsPrefix = alnDir + "/$tumorID.novoalign.metrics"
    string tumorCoverageFile  = alnDir + "/$tumorID.novoalign.$referenceName.exons.bed"
    string[] tumorGrpFqs = getFastqs( tumorCfgs )
    string[] tumorFqs
    for( string f : tumorGrpFqs ) {
      tumorFqs.add( f.split(",") )
    }

    # Complex dependency
    if( tumorDedupBam <- tumorFqs ) {
      # Will mark these for removal
      string[] tmpFiles

      # Map fastqs
      string{} results   = sampleNovoalignMap( tumorCfgs, reference, novoIndex, opt, alnDir, alnLogsDir )
      string[] currBams  = results{"bams"}.split(",")
      string[] currOther = results{"others"}.split(",")
      string[] currTids  = results{"tids"}.split(",")
      tmpFiles.add(currOther)

      #-- SAFE GUARD
      wait currTids

      # Merge
      string mergeTask = mergeBams( currBams, tumorMergeBam, tumorMergeLogs, tumorID, "novoalign", opt )
      #tmpFiles.add( [tumorMergeBam, tumorMergeBam.swapExt("bam", "bai") ] )

      # Dedup
      string ttid = dedupBam( tumorMergeBam, tumorDedupBam, tumorDedupLogs, tumorID, "novoalign", opt )

      # Mark tmp files for removal
      #tmpFiles.rmOnExit()

      # Metrics
      collectMetrics( tumorDedupBam, tumorMetricsPrefix, tumorCoverageFile, tumorMetricsLogs, \
                      tumorID, "novoalign", opt )
    } else info("Sample=$sample | Phenotype=TUMOR | Task=Alignments | Aln=novoalign | Run=false")
  }
}

/**
 * Runs novoalign 
 * @input cfgs the list of readgroup configs for this sample
 * @input fqs the list of input fastqs for this sample
 * @input reference the reference fasta
 * @input novoIndex the Novoalign index 
 * @input opt the option map
 * @input alnDir the alignment output directory
 * @input alnLogsDir the alignment logs output directory
 * @returns a map of bams, other files, raw fastqs and alignment tasks
 */
string{} sampleNovoalignMap( string[] cfgs, string reference, string novoIndex, string{} opt, \
                             string alnDir, string alnLogsDir ) {

  # Return lists
  string[] others
  string[] bams
  string[] tids

  # Novoalign options
  string novoExe     = opt{"novoalign_exe"}
  int novoThreads    = opt{"novoalign_threads"}.parseInt()
  string samtoolsExe = opt{"samtools_exe"}
  int minMapQ        = opt{"min_map_q"}.parseInt()
  string novoRepeats = opt{"novoalign_repeats"}
  string rtrim
  string maxOccurOpt
  if( opt.hasKey("novoalign_max_multi") ) maxOccurOpt = " -e " + opt{"novoalign_max_multi"}
  if( opt{"novoalign_clip_trailing"}.parseBool() ) rtrim = " -H" 

  # Run settings
  string[] modNames = ["novoalign_modname", "samtools_modname"]
  string mods       = "# Running novoalign" 
  int novoMem       = opt{"novoalign_mem"}.parseInt() * G
  novoMem           = getMemorySize( novoMem, novoThreads )
  mods              = getModuleString( modNames, mods )

  for( int i=0 ; i < cfgs.size() ; i++ ) {
    # Ins
    string{} cfg   = config(cfgs[i])
    string[] fqLst = getFastqsRG( cfg ) 

    # Readgroup information
    int offset      = cfg{"offset"}.parseInt()
    bool clip       = cfg{"clip"}.parseBool()
    bool paired     = cfg{"paired"}.parseBool()
    string rgid     = cfg{"readgroup"}
    string rgString = cfg{"rgstring"}
    int fragment    = cfg{"fragment"}.parseInt()
    int sdfragment  = cfg{"fragment_sd"}.parseInt()

    # Log Files
    string alnLog = alnLogsDir + "/$rgid.novoalign.aln.logs"

    # Bwa options
    string offsetOpt = "STDFQ"
    if( offset != 33 ) {
      if( !paired ) { offsetOpt = "ILMFQ" }
      else {
        if( !clip ) { offsetOpt = "ILMFQ" }
      }
    }

    #-- PAIRED & CLIPPED --#
    if( fqLst.size() == 3 ) {
      string{} resMap = novoPairedAndClipped( fqLst[0], fqLst[1], fqLst[2], rgid, rgString, sample, \
                                              alnDir, novoExe, novoThreads, novoMem, samtoolsExe, \
                                              minMapQ, novoRepeats, rtrim, maxOccurOpt, fragment, \
                                              sdfragment, offsetOpt, alnLog, mods )
      bams.add(resMap{"bams"}.split(","))
      others.add(resMap{"tmps"}.split(","))
      tids.add(resMap{"tid"})
    } 

    #-- PAIRED & !CLIPPED --#
    else if( fqLst.size() == 2 ) {
      string{} resMap = novoPairedNotClipped( fqLst[0], fqLst[1], rgid, rgString, sample, \
                                              alnDir, novoExe, novoThreads, novoMem, samtoolsExe, \
                                              minMapQ, novoRepeats, rtrim, maxOccurOpt, fragment, \
                                              sdfragment, offsetOpt, alnLog, mods )
      bams.add(resMap{"bams"}.split(","))
      others.add(resMap{"tmps"}.split(","))
      tids.add(resMap{"tid"})
    } 


    #-- SINGLE END --#
    else if( fqLst.size() == 1 ) {
      string{} resMap = novoSingle( fqLst[0], rgid, rgString, sample, \
                                    alnDir, novoExe, novoThreads, novoMem, samtoolsExe, \
                                    minMapQ, novoRepeats, rtrim, maxOccurOpt, fragment, \
                                    sdfragment, offsetOpt, alnLog, mods )
      bams.add(resMap{"bams"}.split(","))
      others.add(resMap{"tmps"}.split(","))
      tids.add(resMap{"tid"})
    }
  }

  # Return map
  string{} retMap = {"bams" => bams.join(","), "others" => others.join(",")} 
  return( retMap )
}

/**
 * Runs novoalign for paired and clipped samples
 * @input fq1 left fastq
 * @input fq2 right fastq
 * @input fq3 merged fastq
 * @input rgid readgroup id
 * @input rgString string formatted @RG information
 * @input sample sample ID
 * @input alnDir the alignment output dir
 * @input novoExe novoalign executable
 * @input novoThreads the number of threads to use
 * @input novoMem the memory size for this task
 * @input samtoolsExe samtools executable
 * @input minMapQ minimum MAPQ score for filtering
 * @input novoRepeats what to do with multimapped reads
 * @input rtrim trim reads parameter
 * @input maxOccurOpt max occur parameter
 * @input fragment the mean fragment size
 * @input sdfragment the SD fragment size
 * @input offsetOpt the Phred-offset option
 * @input alnLog the log file
 * @input mods the module list
 * @returns a map of bam files, tmp files and task ids
 */ 
string{} novoPairedAndClipped( string fq1, string fq2, string fq3, string rgid, \
                               string rgString, string sample, string alnDir, string novoExe, \
                               int novoThreads, int novoMem, string samtoolsExe, int minMapQ, \
                               string novoRepeats, string rtrim, string maxOccurOpt, int fragment, \
                               int sdfragment, string offsetOpt, string alnLog, string mods ) {
  # Outputs
  string tmpDir   = alnDir + "/tmp"
  string rawBam1  = tmpDir + "/$rgid.novoalign.paired.bam"
  string rawBam2  = tmpDir + "/$rgid.novoalign.merged.bam"
  string sortPfx1 = tmpDir + "/$rgid.novoalign.paired.sort"
  string sortPfx2 = tmpDir + "/$rgid.novoalign.merged.sort"
  string sortBam1 = tmpDir + "/$rgid.novoalign.paired.sort.bam"
  string sortBam2 = tmpDir + "/$rgid.novoalign.merged.sort.bam"
  if( !tmpDir.exists() ) tmpDir.mkdir()

  # Run
  string tid
  if( [ sortBam1, sortBam2 ] <- [fq1, fq2, fq3] ) {
    info("Sample=$sample | Readgroup=$rgid | Task=Novoalign | Run=true")
    tid = task( [ sortBam1, sortBam2 ] <- [fq1, fq2, fq3], cpus := novoThreads, \
          mem := novoMem, taskName := "novoalign.$rgid" ) {
      sys set -o pipefail
      sys $mods
      sys echo "*****Running paired-end*****" > $alnLog
      sys $novoExe -F $offsetOpt -r $novoRepeats$rtrim$maxOccurOpt -f $fq1 $fq2 \
          -d $novoIndex -o SAM $rgString -i PE $fragment,$sdfragment -o Sync -c $novoThreads 2>> $alnLog \
          | $samtoolsExe view -q $minMapQ -F 4 -bhT $reference -o $rawBam1 - 2>> $alnLog
      sys sleep 1
      sys $samtoolsExe sort -@ $novoThreads $rawBam1 $sortPfx1 2>> $alnLog
      sys sleep 1
      sys $samtoolsExe index $sortBam1 2>> $alnLog
      sys sleep 1
      sys echo "*****Running merged pairs*****" >> $alnLog
      sys $novoExe -F $offsetOpt -r $novoRepeats$rtrim$maxOccurOpt -f $fq3 \
          -d $novoIndex -o SAM $rgString -o Sync -c $novoThreads 2>> $alnLog \
          | $samtoolsExe view -q $minMapQ -F 4 -bhT $reference -o $rawBam2 - 2>> $alnLog
      sys sleep 1
      sys $samtoolsExe sort -@ $novoThreads $rawBam2 $sortPfx2 2>> $alnLog
      sys sleep 1
      sys $samtoolsExe index $sortBam2 2>> $alnLog
      sys sleep $safeSleep
    }
  } else info("Sample=$sample | Readgroup=$rgid | Task=Novoalign | Run=false")
 
  # Add bams to bam list 
  string[] bams = [sortBam1, sortBam2]

  # Add others to others list
  string[] tmps = [rawBam1, rawBam1 + ".bai", rawBam2, rawBam2 + ".bai"]

  # Return map
  string{} rmap = {"bams" => bams.join(","), "tmps" => tmps.join(","), "tid" => tid}
  return rmap
}

/**
 * Runs novoalign for paired and NOT clipped samples
 * @input fq1 left fastq
 * @input fq2 right fastq
 * @input rgid readgroup id
 * @input rgString string formatted @RG information
 * @input sample sample ID
 * @input alnDir the alignment output dir
 * @input novoExe novoalign executable
 * @input novoThreads the number of threads to use
 * @input novoMem the memory size for this task
 * @input samtoolsExe samtools executable
 * @input minMapQ minimum MAPQ score for filtering
 * @input novoRepeats what to do with multimapped reads
 * @input rtrim trim reads parameter
 * @input maxOccurOpt max occur parameter
 * @input fragment the mean fragment size
 * @input sdfragment the SD fragment size
 * @input offsetOpt the Phred-offset option
 * @input alnLog the log file
 * @input mods the module list
 * @returns a map of bam files, tmp files and task ids
 */ 
string{} novoPairedNotClipped( string fq1, string fq2, string rgid, \
                               string rgString, string sample, string alnDir, string novoExe, \
                               int novoThreads, int novoMem, string samtoolsExe, int minMapQ, \
                               string novoRepeats, string rtrim, string maxOccurOpt, int fragment, \
                               int sdfragment, string offsetOpt, string alnLog, string mods ) {
  # Outputs
  string tmpDir   = alnDir + "/tmp"
  string rawBam1  = tmpDir + "/$rgid.novoalign.paired.bam"
  string sortPfx1 = tmpDir + "/$rgid.novoalign.paired.sort"
  string sortBam1 = tmpDir + "/$rgid.novoalign.paired.sort.bam"
  if( !tmpDir.exists() ) tmpDir.mkdir()

  # Run
  string tid
  if( sortBam1 <- [fq1, fq2] ) {
    info("Sample=$sample | Readgroup=$rgid | Task=Novoalign | Run=true")
    tid = task( sortBam1 <- [fq1, fq2], cpus := novoThreads, mem := novoMem, taskName := "novoalign.$rgid" ) {
      sys set -o pipefail
      sys $mods
      sys echo "*****Running paired-end*****" > $alnLog
      sys $novoExe -F $offsetOpt -r $novoRepeats$rtrim$maxOccurOpt -f $fq1 $fq2 \
          -d $novoIndex -o SAM $rgString -i PE $fragment,$sdfragment -o Sync -c $novoThreads 2>> $alnLog \
          | $samtoolsExe view -q $minMapQ -F 4 -bhT $reference -o $rawBam1 - 2>> $alnLog
      sys sleep 1
      sys $samtoolsExe sort -@ $novoThreads $rawBam1 $sortPfx1 2>> $alnLog
      sys sleep 1
      sys $samtoolsExe index $sortBam1 2>> $alnLog
      sys sleep $safeSleep
    }
  } else info("Sample=$sample | Readgroup=$rgid | Task=Novoalign | Run=false")
     
  # Add bams to bam list 
  string[] bams = [sortBam1]

  # Add others to others list
  string[] tmps = [rawBam1, rawBam1 + ".bai"]

  # Return map
  string{} rmap = {"bams" => bams.join(","), "tmps" => tmps.join(","), "tid" => tid}
  return rmap
}

/**
 * Runs novoalign for single end reads 
 * @input fq1 left fastq
 * @input rgid readgroup id
 * @input rgString string formatted @RG information
 * @input sample sample ID
 * @input alnDir the alignment output dir
 * @input novoExe novoalign executable
 * @input novoThreads the number of threads to use
 * @input novoMem the memory size for this task
 * @input samtoolsExe samtools executable
 * @input minMapQ minimum MAPQ score for filtering
 * @input novoRepeats what to do with multimapped reads
 * @input rtrim trim reads parameter
 * @input maxOccurOpt max occur parameter
 * @input fragment the mean fragment size
 * @input sdfragment the SD fragment size
 * @input offsetOpt the Phred-offset option
 * @input alnLog the log file
 * @input mods the module list
 * @returns a map of bam files, tmp files and task ids
 */ 
string{} novoSingle( string fq1, string rgid, string rgString, string sample, string alnDir, \
                     string novoExe, int novoThreads, int novoMem, string samtoolsExe, int minMapQ, \
                     string novoRepeats, string rtrim, string maxOccurOpt, int fragment, \
                     int sdfragment, string offsetOpt, string alnLog, string mods ) {
  # Outputs
  string tmpDir   = alnDir + "/tmp"
  string rawBam1  = tmpDir + "/$rgid.novoalign.single.bam"
  string sortPfx1 = tmpDir + "/$rgid.novoalign.single.sort"
  string sortBam1 = tmpDir + "/$rgid.novoalign.single.sort.bam"
  if( !tmpDir.exists() ) tmpDir.mkdir()

  # Run
  string tid
  if( sortBam1 <- fq1 ) {
    info("Sample=$sample | Readgroup=$rgid | Task=Novoalign | Run=true")
     tid = task( sortBam1 <- fq1, cpus := novoThreads, mem := novoMem, taskName := "novoalign.$rgid" ) {
       sys set -o pipefail
       sys echo "*****Running single-end*****" > $alnLog
       sys $novoExe -F $offsetOpt -r $novoRepeats$rtrim$maxOccurOpt -f $fq1 \
           -d $novoIndex -o SAM $rgString -o Sync -c $novoThreads 2>> $alnLog \
           | grep -v "^@PG" | $samtoolsExe view -q $minMapQ -F 4 -bhT $reference -o $rawBam1 - 2>> $alnLog
       sys sleep 1
       sys $samtoolsExe sort -@ $novoThreads $rawBam1 $sortPfx1 2>> $alnLog
       sys sleep 1
       sys $samtoolsExe index $sortBam1 2>> $alnLog
       sys sleep $safeSleep
    }
  } else info("Sample=$sample | Readgroup=$rgid | Task=Novoalign | Run=false")
 
  # Add bams to bam list 
  string[] bams = [sortBam1]

  # Add others to others list
  string[] tmps = [rawBam1, rawBam1 + ".bai"]

  # Return map
  string{} rmap = {"bams" => bams.join(","), "tmps" => tmps.join(","), "tid" => tid}
  return rmap
}
